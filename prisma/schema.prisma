generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  name               String
  profilePhoto       String?
  contactNumber      String
  email              String          @unique
  password           String
  role               UserRole
  gender             Gender
  needPasswordChange Boolean         @default(true)
  isDeleted          Boolean         @default(false)
  status             UserStatus      @default(ACTIVE)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  events             Events[]        @relation(name: "organizer")
  participation      Participation[]

  invitationsSent     Invitation[] @relation(name: "invitationsSendedUser")
  invitationsReceived Invitation[] @relation(name: "invitationsReceived")
  review              Review[]
  stripeCustomerId    String?
  payment             Payment[]

  @@map("users")
}

model Events {
  id               String      @id @default(uuid())
  title            String
  description      String
  coverPhoto       String
  date_time        String
  venue            String
  location         String
  is_public        Boolean     @default(true)
  heroSection      Boolean     @default(false)
  is_paid          Boolean     @default(false)
  registration_fee Float       @default(0)
  isDeleted        Boolean     @default(false)
  status           EventStatus @default(UPCOMING)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  organizerId   String
  organizer     User            @relation(name: "organizer", fields: [organizerId], references: [id]) // Added relation
  invitation    Invitation[]
  participation Participation[]
  review        Review[]
  Payment       Payment[]

  @@map("events")
}

model Participation {
  id             String                     @id @default(uuid())
  userId         String
  eventId        String
  status         ParticipationStatus        @default(PENDING)
  payment_status ParticipationPaymentStatus @default(FREE)
  paymentId      String?
  joined_at      DateTime                   @default(now())

  // Relation
  user    User      @relation(fields: [userId], references: [id])
  event   Events    @relation(fields: [eventId], references: [id])
  Payment Payment[]

  @@unique([userId, eventId])
  @@map("participations")
}

model Payment {
  id                 String        @id @default(uuid())
  participation_id   String?
  eventId            String
  event              Events        @relation(fields: [eventsId], references: [id])
  transactionId      String        @unique
  amount             Float
  payment_status     PaymentStatus
  paymentGatewayData Json
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // âœ… Only define relation here
  eventsId      String
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  participation Participation? @relation(fields: [participation_id], references: [id])

  @@map("payments")
}

model Invitation {
  id          String           @id @default(uuid())
  senderId    String
  receiverId  String?
  referredId  String?
  event_id    String
  status      InvitationStatus @default(PENDING)
  invited_at  DateTime         @default(now())
  respondedAt DateTime         @updatedAt

  sender   User   @relation(name: "invitationsSendedUser", fields: [senderId], references: [id])
  reserver User?  @relation(name: "invitationsReceived", fields: [receiverId], references: [id])
  event    Events @relation(fields: [event_id], references: [id])

  @@unique([receiverId, event_id])
  @@map("invitations")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  eventId    String
  rating     String
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId], name: "userId_eventId") // explicitly name it
  @@map("Reviews")
}

enum PaymentStatus {
  PAID
  FAILED
  REFUNDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ParticipationPaymentStatus {
  FREE
  COMPLETED
  REFUNDED
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum EventStatus {
  UPCOMING
  ONGOING
  END
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
