generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  name               String
  profilePhoto       String?
  contactNumber      String
  email              String          @unique
  password           String
  role               UserRole
  gender             Gender
  needPasswordChange Boolean         @default(true)
  isDeleted          Boolean         @default(false)
  status             UserStatus      @default(ACTIVE)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  events             Events[]        @relation(name: "organizer")
  Participation      Participation[]

  @@map("users")
}

model Events {
  id               String      @id @default(uuid())
  title            String
  description      String
  coverPhoto       String
  date_time        String
  venue            String
  location         String
  is_public        Boolean     @default(true)
  is_paid          Boolean     @default(false)
  registration_fee Float
  isDeleted        Boolean     @default(false)
  status           EventStatus @default(UPCOMING)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  organizerId String
  organizer   User   @relation(name: "organizer", fields: [organizerId], references: [id]) // Added relation

  @@map("events")
}

model Participation {
  id             String                     @id @default(uuid())
  userId         String
  eventId        String
  status         ParticipationStatus        @default(PENDING)
  payment_status ParticipationPaymentStatus @default(FREE)
  paymentId      String?
  joined_at      DateTime                   @default(now())

  // Relation
  User User @relation(fields: [userId], references: [id])

  @@map("participations")
}

model Invitation {
  id              String @id @default(uuid())
  organizerId     String
  invited_user_id String
  event_id        String
  status  InvitationStatus @default(PENDING)
  invited_at      DateTime                   @default(now())
  responded_at    DateTime    @updatedAt

  @@map("invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ParticipationPaymentStatus {
  FREE
  COMPLETED
  REFUNDED
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum EventStatus {
  UPCOMING
  ONGOING
  END
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}
