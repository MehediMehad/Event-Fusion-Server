generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  name               String
  profilePhoto       String?
  contactNumber      String
  email              String          @unique
  password           String
  role               UserRole
  gender             Gender
  needPasswordChange Boolean         @default(true)
  isDeleted          Boolean         @default(false)
  status             UserStatus      @default(ACTIVE)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  events             Events[]        @relation(name: "organizer")
  participation      Participation[]
  review             Review?

  invitationsSent     Invitation[] @relation(name: "invitationsSendedUser")
  invitationsReceived Invitation[] @relation(name: "invitationsReceived")

  @@map("users")
}

model Events {
  id               String      @id @default(uuid())
  title            String
  description      String
  coverPhoto       String
  date_time        String
  venue            String
  location         String
  is_public        Boolean     @default(true)
  is_paid          Boolean     @default(false)
  registration_fee Float       @default(0)
  isDeleted        Boolean     @default(false)
  status           EventStatus @default(UPCOMING)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  organizerId   String
  organizer     User            @relation(name: "organizer", fields: [organizerId], references: [id]) // Added relation
  invitation    Invitation[]
  review        Review[]
  participation Participation[]

  @@map("events")
}

model Participation {
  id             String                     @id @default(uuid())
  userId         String
  eventId        String
  status         ParticipationStatus        @default(PENDING)
  payment_status ParticipationPaymentStatus @default(FREE)
  paymentId      String?
  joined_at      DateTime                   @default(now())

  // Relation
  user    User     @relation(fields: [userId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])
  event   Events   @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@map("participations")
}

model Payment {
  id               String        @id @default(uuid())
  participation_id String        @unique
  transactionId    String        @unique
  amount           Float
  payment_status   PaymentStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  participation Participation[]

  @@map("payments")
}

model Invitation {
  id              String           @id @default(uuid())
  senderId        String
  receiverId String?
  event_id        String
  status          InvitationStatus @default(PENDING)
  invited_at      DateTime         @default(now())
  respondedAt     DateTime         @updatedAt

  sender   User   @relation(name: "invitationsSendedUser", fields: [senderId], references: [id])
  reserver User?  @relation(name: "invitationsReceived", fields: [receiverId], references: [id])
  event    Events @relation(fields: [event_id], references: [id])

  @@unique([receiverId, event_id])
  @@map("invitations")
}

model Review {
  id         String   @id @default(uuid())
  userId     String   @unique
  eventId    String   @unique
  rating     Rating
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])

  @@map("Reviews")
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum PaymentStatus {
  PAID
  FAILED
  REFUNDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ParticipationPaymentStatus {
  FREE
  COMPLETED
  REFUNDED
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum EventStatus {
  UPCOMING
  ONGOING
  END
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
